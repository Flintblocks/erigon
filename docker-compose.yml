# Erigon by default is "all in one binary" solution, but it's possible start TxPool as separated processes.
# Same true about: JSON RPC layer (RPCDaemon), p2p layer (Sentry), history download layer (Downloader), consensus.
# Don't start services as separated processes unless you have clear reason for it: resource limiting, scale, replace by your own implementation, security.
# This file is an example: how to start Erigon's services as separated processes.

# Default: --datadir=/home/erigon/.local/share/erigon
# Default UID: 1000
# Default GID: 1000
# Ports: `9090` execution engine (private api), `9091` sentry, `9092` consensus engine, `9093` snapshot downloader, `9094` TxPool
# Ports: `8545` json rpc, `8551` consensus json rpc, `30303` eth p2p protocol, `42069` bittorrent protocol,

# Connections: erigon -> (sentries, downloader), rpcdaemon -> (erigon, txpool), txpool -> erigon

version: '2.2'

# Basic erigon's service
x-erigon-service:
  &default-erigon-service
  image: thorax/erigon:${TAG:-latest}
  pid: service:erigon # Use erigon's PID namespace. It's required to open Erigon's DB from another process (RPCDaemon local-mode)
  volumes_from: [ erigon ]
  restart: unless-stopped
  mem_swappiness: 0
  user: ${DOCKER_UID:-1000}:${DOCKER_GID:-1000}
x-logging:
  &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  erigon:
    image: thorax/erigon:${TAG:-latest}
    build:
      args:
        UID: ${DOCKER_UID:-1000}
        GID: ${DOCKER_GID:-1000}
      context: .
    command: |
      ${ERIGON_FLAGS-} --private.api.addr=0.0.0.0:9090
      --sentry.api.addr=sentry:9091 --downloader.api.addr=downloader:9093 --txpool.disable
      --metrics --metrics.addr=0.0.0.0 --metrics.port=6060 --pprof --pprof.addr=0.0.0.0 --pprof.port=6061
      --authrpc.jwtsecret=/home/erigon/.local/share/erigon/jwt.hex --datadir=/home/erigon/.local/share/erigon
    ports: [ "8551:8551" ]
    volumes:
      # It's ok to mount sub-dirs of "datadir" to different drives
      - ${XDG_DATA_HOME:-~/.local/share}/erigon:/home/erigon/.local/share/erigon
    restart: unless-stopped
    mem_swappiness: 0

  sentry:
    <<: *default-erigon-service
    entrypoint: sentry
    command: ${SENTRY_FLAGS-} --sentry.api.addr=0.0.0.0:9091 --datadir=/home/erigon/.local/share/erigon
    ports: [ "30303:30303/tcp", "30303:30303/udp" ]

  downloader:
    <<: *default-erigon-service
    entrypoint: downloader
    command: ${DOWNLOADER_FLAGS-} --downloader.api.addr=0.0.0.0:9093 --datadir=/home/erigon/.local/share/erigon
    ports: [ "42069:42069/tcp", "42069:42069/udp" ]

  txpool:
    <<: *default-erigon-service
    entrypoint: txpool
    command: ${TXPOOL_FLAGS-} --private.api.addr=erigon:9090 --txpool.api.addr=0.0.0.0:9094 --sentry.api.addr=sentry:9091 --datadir=/home/erigon/.local/share/erigon

  rpcdaemon:
    <<: *default-erigon-service
    entrypoint: rpcdaemon
    command: |
      ${RPCDAEMON_FLAGS-} --http.addr=0.0.0.0 --http.vhosts=* --http.corsdomain=* --ws
      --private.api.addr=erigon:9090 --txpool.api.addr=txpool:9094 --datadir=/home/erigon/.local/share/erigon
    ports: [ "8545:8545" ]
  lighthouse:
    restart: "unless-stopped"
    pid: service:erigon
    image: sigp/lighthouse
    user: ${DOCKER_UID:-1000}:${DOCKER_GID:-1000}
    stop_grace_period: 1m
    volumes:
      - ${XDG_DATA_HOME:-~/.local/share}/lhconsensus-data:/var/lib/lighthouse
      - /etc/localtime:/etc/localtime:ro
      - ${XDG_DATA_HOME:-~/.local/share}/erigon:/var/lib/lighthouse/beacon/ee-secret
    <<: *logging
    entrypoint:
      - docker-entrypoint.sh
      - lighthouse
      - bn
      - --disable-upnp
      - --datadir
      - /var/lib/lighthouse
      - --http
      - --http-address
      - 0.0.0.0
      - --http-port
      - 5052
      - --network
      - mainnet
      - --port
      - 9000
      - --target-peers
      - ${CL_MAX_PEER_COUNT:-80}
      - --execution-endpoint
      - erigon:8551
      - --execution-jwt
      - /var/lib/lighthouse/beacon/ee-secret/jwt.hex
      - --debug-level=4
      - --metrics
      - --metrics-address
      - 0.0.0.0
      - --metrics-port
      - "6060"
      - --validator-monitor-auto
    labels:
      - traefik.enable=true
      - traefik.http.routers.${CL_HOST:-cl}.service=${CL_HOST:-cl}
      - traefik.http.routers.${CL_HOST:-cl}.entrypoints=websecure
      - traefik.http.routers.${CL_HOST:-cl}.rule=Host(`${CL_HOST:-cl}.${DOMAIN}`)
      - traefik.http.routers.${CL_HOST:-cl}.tls.certresolver=letsencrypt
      - traefik.http.routers.${CL_HOST:-cl}lb.service=${CL_HOST:-cl}
      - traefik.http.routers.${CL_HOST:-cl}lb.entrypoints=websecure
      - traefik.http.routers.${CL_HOST:-cl}lb.rule=Host(`${CL_LB:-cl-lb}.${DOMAIN}`)
      - traefik.http.routers.${CL_HOST:-cl}lb.tls.certresolver=letsencrypt
      - traefik.http.services.${CL_HOST:-cl}.loadbalancer.server.port=${CL_REST_PORT:-5052}
  prometheus:
    image: prom/prometheus:v2.43.0
    user: ${DOCKER_UID:-1000}:${DOCKER_GID:-1000} # Uses erigon user from Dockerfile
    command: --log.level=warn --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --storage.tsdb.retention.time=150d --web.console.libraries=/usr/share/prometheus/console_libraries --web.console.templates=/usr/share/prometheus/consoles
    ports: [ "9090:9090" ]
    volumes:
      - ${ERIGON_PROMETHEUS_CONFIG:-./cmd/prometheus/prometheus.yml}:/etc/prometheus/prometheus.yml
      - ${XDG_DATA_HOME:-~/.local/share}/erigon-prometheus:/prometheus
    restart: unless-stopped

  grafana:
    image: grafana/grafana:9.4.7
    user: "472:0" # required for grafana version >= 7.3
    ports: [ "3000:3000" ]
    volumes:
      - ${ERIGON_GRAFANA_CONFIG:-./cmd/prometheus/grafana.ini}:/etc/grafana/grafana.ini
      - ./cmd/prometheus/datasources:/etc/grafana/provisioning/datasources
      - ./cmd/prometheus/dashboards:/etc/grafana/provisioning/dashboards
      - ${XDG_DATA_HOME:-~/.local/share}/erigon-grafana:/var/lib/grafana
    restart: unless-stopped
